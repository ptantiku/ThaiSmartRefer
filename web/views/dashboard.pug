html
  head
    title Thai Smart Refer
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    meta(name="description" content="")
    meta(name="author" content="")

    link(href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css" rel="stylesheet")
    link(href="css/timeTo.css" rel="stylesheet")
    link(href="css/style.css" rel="stylesheet")

    script(type="text/javascript").
      var lastblock = #{lastblock};

  body
    div(id="wrap")
      div(class="container")
        div(class="page-header text-center")
          h1 ศูนย์ประสานงานการส่งต่อผู้ป่วย จังหวัดเลย
          div
            table(class="table table-striped table-bordered table-list" id="lists")
              thead
                tr
                  th(class="text-center") เวลาถึง
                  th(class="text-center") เวลาถึง (วินาที)
                  th(class="text-center") ชื่อ-สกุล
                  th(class="text-center") โรงบาล
                  th(class="text-center") การวินิจฉัย
                  th(class="text-center") Triage
              tbody
        div(id="push")

    div(id="footer")
      div(class="container")
        div(class="row")
          div(class="col-md-3 col-md-offset-9 text-center")
            h2(id="clock") 22:25:22

  script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js")
  script(src="http://lexxus.github.io/jq-timeTo/js/jquery.timeTo.min.js")
  script(src="http://momentjs.com/downloads/moment.js")
  script(type="text/javascript" src="js/web3.js")
  script(type="text/javascript" src="js/bignumber.min.js")
  script(type="text/javascript").

    var hostpitals = {
    
      1: 'รพ.เลย',
      2: 'รพ.ภูกระดึง'
    };
    
    var severitys = {
      1: {
        'class': 'label-success',
        'text': 'N',
      },
      2: {
        'class': 'label-primary',
        'text': 'S',
      },
      3: {
        'class': 'label-info',
        'text': 'U',
      },
      4: {
        'class': 'label-warning',
        'text': 'E',
      },
      5: {
        'class': 'label-danger',
        'text': 'R',
      },
    };
    
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));
    
    var coinbase = web3.eth.coinbase;
    console.log('coinbase = ' + coinbase);
    
    //var contract_id = "0x343c0e9796Ca35158877063973BdD58Fe4AdF996";
    var contract_id = "0x1fE5154586e63BB1512C025c065dd495e0D6E5e6";
    
    var abi = [ { "constant": false, "inputs": [ { "name": "date_time", "type": "uint256" }, { "name": "est_time", "type": "uint256" }, { "name": "name", "type": "string" }, { "name": "sex", "type": "string" }, { "name": "age", "type": "uint256" }, { "name": "personal_id", "type": "string" }, { "name": "src_id", "type": "uint256" }, { "name": "dest_id", "type": "uint256" }, { "name": "department_id", "type": "uint256" }, { "name": "symptom", "type": "string" }, { "name": "severity", "type": "uint256" } ], "name": "add", "outputs": [], "payable": false, "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "date_time", "type": "uint256" }, { "indexed": false, "name": "est_time", "type": "uint256" }, { "indexed": false, "name": "name", "type": "string" }, { "indexed": false, "name": "sex", "type": "string" }, { "indexed": false, "name": "age", "type": "uint256" }, { "indexed": false, "name": "personal_id", "type": "string" }, { "indexed": false, "name": "src_id", "type": "uint256" }, { "indexed": false, "name": "dest_id", "type": "uint256" }, { "indexed": false, "name": "department_id", "type": "uint256" }, { "indexed": false, "name": "symptom", "type": "string" }, { "indexed": false, "name": "severity", "type": "uint256" } ], "name": "alert", "type": "event" } ];
    
    
    //setup contract
    var MyContract = web3.eth.contract(abi);
    var ContractInstance = MyContract.at(contract_id);
    
    
    //setup watch
    var event = ContractInstance.alert({dest_id: 2},{fromBlock: lastblock, toBlock: 'latest', address: contract_id});
    // watch for changes
    event.watch(function(error, result){
        if (!error) {
          //console.log(result);
    
          var args = result.args;
    
          convertData(args);
    
          //var x = new BigNumber(args.age);
          //console.log(b2n(args.age));

          console.log("lastblock=" + result.blockNumber);
          document.cookie = "lastblock=" + result.blockNumber;
        }
    });
    
    function convertData(blockData)
    {
      var current_time = moment().unix();
      var arrival_time = b2n(blockData.date_time) + b2n(blockData.est_time);
      var est_sec = (arrival_time - current_time);
    
      var src_id = b2n(blockData.src_id);
      var dest_id = b2n(blockData.dest_id);
      var severity_id = b2n(blockData.severity);
    
      //console.log('severity_id = ' + severity_id);
      //console.log(severitys);
    
      var resultData = {
        'date_time': b2n(blockData.date_time),
        'est_time': b2n(blockData.est_time),
        'est_sec': est_sec,
        'arrival_time': arrival_time,
        'name': blockData.name,
        'sex': blockData.sex,
        'age': b2n(blockData.age),
        'personal_id': blockData.personal_id,
        'src_id': src_id,
        'src_name': hostpitals[src_id],
        'dest_id': dest_id,
        'dest_name': hostpitals[dest_id],
        'department_id': b2n(blockData.department_id),
        'symptom': blockData.symptom,
        'severity': getSeverity(severity_id),
        'severity_id': severity_id
      }
    
    
      console.log(resultData);
    
    
      var row = '';

      row += '<tr>';
      row += '<td class="text-center">' + moment(resultData.date_time, "X").format("H:mm:ss") + '</td>';
      row += '<td class="text-center">' + resultData.est_sec + '</td>';
      row += '<td class="text-center">' + resultData.name + '</td>';
      row += '<td class="text-center">' + resultData.src_name + '</td>';
      row += '<td>' + resultData.symptom + '</td>';
      row += '<td class="text-center"><span class="label ' + resultData.severity.class + '">' + resultData.severity.text  + '</td>';
      row += '</tr>';

      if (resultData.date_time > 1000000)
      {
        $("#lists > tbody").append(row);
      }
    
      
    }
    
    function getSeverity(severity)
    {
      if (severity <= 5)
      {
          return severitys[severity];
      } else {
          return {
            'class': 'label-info',
            'text': '-'
          }
      }
    }
    
    function b2n(bignumber)
    {
      if (bignumber != undefined)
      {
        var n = new BigNumber(bignumber);
        return n.toNumber();
      } else {
        return 0;
      }
    }
    
    //var contract = web3.eth.contract( "0x343c0e9796Ca35158877063973BdD58Fe4AdF996", desc);
    
    //console.log(contract);
    
    $('#clock').timeTo({
        fontSize: 30
    });

